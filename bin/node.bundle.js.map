{"version":3,"sources":["webpack:///webpack/bootstrap e7ad2b704609a11e7bda","webpack:///./src/index.js","webpack:///./src/outgoing.js","webpack:///./src/actions.js","webpack:///./src/umm.js","webpack:///external \"util\"","webpack:///external \"lodash\"","webpack:///external \"bluebird\"","webpack:///./src/twitter.js","webpack:///./src/incoming.js","webpack:///external \"lru-cache\"","webpack:///external \"twit\"","webpack:///external \"path\"","webpack:///external \"fs\""],"names":["path","require","fs","_","Promise","twitter","outgoingPending","pending","outgoingMiddleware","event","next","platform","type","setValue","args","__id","message_id","ts","split","substr","timestamp","parseInt","mid","method","raw","waitDelivery","waitRead","apply","then","module","exports","config","consumer_key","required","default","env","consumer_secret","access_token","access_token_secret","init","bp","middlewares","register","name","order","handler","description","forIn","action","sendName","replace","msg","arguments","Date","toISOString","Math","random","resolver","promise","resolve","reject","sendOutgoing","ready","configurator","loadAll","startPolling","handlePromise","res","catch","err","handleText","chatId","text","options","sendText","validateChatId","Error","validateText","validateUrl","url","createText","QUICK_REPLY_PAYLOAD","processKeyboards","qrs","blocName","isArray","map","isString","qr","test","exec","payload","startsWith","request_contact","toUpperCase","request_location","getUserId","userId","get","PromisifyEvent","_promise","_resolve","_reject","processOutgoing","instruction","ins","Object","assign","optionsList","pick","prop","isNil","chat","id","strRep","inspect","getTemplates","template","at","umm","registerConnector","templates","Twitter","bot","connected","stream","logger","info","validateConnection","validateOptions","validateBeforeSending","fromCallback","post","screen_name","error","message","response","file","file_comment","messagesCache","max","maxAge","preprocessEvent","console","log","from","date","has","alreadyProcessed","set","extractBasics","on","sendIncoming","direct_message","user","recipient"],"mappings":"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","file":"node.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e7ad2b704609a11e7bda","import outgoing from './outgoing';\nimport actions from './actions';\nimport umm from './umm';\n\nconst path = require('path');\nconst fs = require('fs');\nconst _ = require('lodash');\nconst Promise = require('bluebird');\n\nimport Twitter from './twitter';\n\nlet twitter = null;\nconst outgoingPending = outgoing.pending;\n\nconst outgoingMiddleware = (event, next) => {\n  if (event.platform !== 'twitter') {\n    return next();\n  }\n  \n  if (!outgoing[event.type]) {\n    return next('Unsupported event type: ' + event.type);\n  }\n\n  const setValue = method => (...args) => {\n    if (event.__id && outgoingPending[event.__id]) {\n\n      if (args && args[0] && args[0].message_id) {\n        let ts = args[0].message_id.split(':')[0];\n        ts = ts && ts.substr(4);\n        outgoingPending[event.__id].timestamp = parseInt(ts);\n        outgoingPending[event.__id].mid = args[0].message_id;\n      }\n\n      if (method === 'resolve' &&\n          (event.raw.waitDelivery || event.raw.waitRead)) {\n        // We skip setting this value because we wait\n      } else {\n        outgoingPending[event.__id][method].apply(null, args);\n        delete outgoingPending[event.__id];\n      }\n    }\n  };\n\n  outgoing[event.type](event, next, twitter).\n      then(setValue('resolve'), setValue('reject'));\n};\n\nmodule.exports = {\n\n  config: {\n    consumer_key: {type: 'string', required: true, default: '', env: 'TWITTER_CONSUMER_KEY'},\n    consumer_secret: {type: 'string', required: true, default: '', env: 'TWITTER_CONSUMER_SECRET'},\n    access_token: {type: 'string', required: true, default: '', env: 'TWITTER_ACCESS_TOKEN'},\n    access_token_secret: {type: 'string', required: true, default: '', env: 'TWITTER_ACCESS_TOKEN_SECRET'}\n  },\n\n  init: function(bp, config) {\n    bp.middlewares.register({\n      name: 'twitter.sendMessages',\n      type: 'outgoing',\n      order: 100,\n      handler: outgoingMiddleware,\n      module: 'botpress-twitter',\n      description: 'Sends out messages that targets platform = twitter.' +\n      ' This middleware should be placed at the end as it swallows events once sent.',\n    });\n    \n\n    bp.twitter = {};\n    _.forIn(actions, (action, name) => {\n      bp.twitter[name] = actions[name];\n      let sendName = name.replace(/^create/, 'send');\n      bp.twitter[sendName] = Promise.method(function() {\n\n        var msg = action.apply(this, arguments);\n        msg.__id = new Date().toISOString() + Math.random();\n        const resolver = {event: msg};\n\n        const promise = new Promise(function(resolve, reject) {\n          resolver.resolve = resolve;\n          resolver.reject = reject;\n        });\n\n        outgoingPending[msg.__id] = resolver;\n\n        bp.middlewares.sendOutgoing(msg);\n\n        return promise;\n      });\n    });\n\n    umm(bp); // Initialize UMM\n  },\n\n  ready: async function(bp, configurator) {\n\n    const config = await configurator.loadAll();\n\n    twitter = new Twitter(bp, config);\n\n    twitter.startPolling(bp);\n  },\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","const handlePromise = (next, promise) => {\n  return promise.then(res => {\n    next();\n    return res;\n  }).catch(err => {\n    next(err);\n    throw err;\n  });\n};\n\nconst handleText = (event, next, twitter) => {\n  if (event.platform !== 'twitter' || event.type !== 'text') {\n    return next();\n  }\n\n  const chatId = event.raw.chatId;\n  const text = event.text;\n  const options = event.raw.options;\n\n  return handlePromise(next, twitter.sendText(chatId, text, options));\n};\n\nmodule.exports = {\n  'text': handleText,\n  pending: {},\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/outgoing.js","\nconst validateChatId = (chatId) => {\n  if (typeof (chatId) !== 'number') {\n    throw new Error('Invalid chat id: ' + chatId);\n  }\n};\n\nconst validateText = (text) => {\n  if (typeof(text) !== 'string' && text !== '') {\n    throw new Error('Text must be a string.');\n  }\n};\n\nconst validateUrl = (url) => {\n  if (typeof(url) !== 'string') {\n    throw new Error('Expected URL to be a string')\n  }\n}\n\n\nconst createText = (chatId, text, options = {}) => {\n  //validateChatId(chatId);\n  validateText(text);\n\n  return  {\n    platform: 'twitter',\n    type: 'text',\n    text: text,\n    raw: {\n      chatId: chatId,\n      options: options,\n    },\n  };\n};\n\n\nmodule.exports = {\n  createText\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/actions.js","import util from 'util';\nimport _ from 'lodash';\nimport Promise from 'bluebird';\nimport actions from './actions';\n\n\nconst QUICK_REPLY_PAYLOAD = /\\<(.+)\\>\\s(.+)/i;\n\n\nfunction processKeyboards(qrs, blocName) {\n  if (!_.isArray(qrs)) {\n    throw new Error('Expected quick_replies to be an array');\n  }\n\n  return qrs.map(qr => {\n    if (_.isString(qr) && QUICK_REPLY_PAYLOAD.test(qr)) {\n      let [, payload, text] = QUICK_REPLY_PAYLOAD.exec(qr);\n      \n      // <.HELLO> becomes <BLOCNAME.HELLO>\n      if (payload.startsWith('.')) {\n        payload = blocName + payload;\n      }\n\n      return [{\n        text: text,\n        request_contact: payload.toUpperCase(),\n        request_location: payload.toUpperCase(),\n      }];\n    };\n\n    return qr;\n  });\n}\n\n\n\n\n\n// TODO Extract this logic directly to botpress's UMM\nfunction getUserId(event) {\n  const userId = _.get(event, 'user.id')\n    || _.get(event, 'user.userId')\n    || _.get(event, 'userId')\n    || _.get(event, 'raw.from.id')\n    || _.get(event, 'raw.userId')\n    || _.get(event, 'raw.user.id');\n\n  if (!userId) {\n    throw new Error('Could not find userId in the incoming event.');\n  }\n\n  return userId;\n}\n\nfunction PromisifyEvent(event) {\n  if (!event._promise) {\n    event._promise = new Promise((resolve, reject) => {\n      event._resolve = resolve;\n      event._reject = reject;\n    });\n  }\n\n  return event;\n}\n\nfunction processOutgoing({ event, blocName, instruction }) {\n  const ins = Object.assign({}, instruction); // Create a shallow copy of the instruction\n\n  ////////\n  // PRE-PROCESSING\n  ////////\n  \n  const optionsList = ['typing', 'keyboards'];\n\n  const options = _.pick(instruction, optionsList);\n  \n  for (let prop of optionsList) {\n    delete ins[prop];\n  }\n\n\n  // if (options.keyboards) {\n  //   options.reply_markup ={\n  //     keyboard: [...processKeyboards(options.keyboards, blocName)]\n  //   };\n  // }\n\n  /////////\n  /// Processing\n  /////////\n\n  if (!_.isNil(instruction.text)) {\n    return actions.createText(event.chat.id, instruction.text, options);\n  }\n\n  ////////////\n  /// POST-PROCESSING\n  ////////////\n  \n  // Nothing to post-process yet\n\n  ////////////\n  /// INVALID INSTRUCTION\n  ////////////\n\n  const strRep = util.inspect(instruction, false, 1);\n  throw new Error(`Unrecognized instruction on Web in bloc '${blocName}': ${strRep}`);\n\n}\n\n////////////\n/// TEMPLATES\n////////////\n\nfunction getTemplates() {\n  return [\n    {\n      type: 'Text - Single message',\n      template: 'block_name_sm:\\n\\  - Text goes here..'\n    },{\n      type: 'Text - Multiple messages',\n      template: 'block_name_mm:\\n  - Text goes here..(1)\\n  - Text goes here..(2)'\n    },{\n      type: 'Text - Random message',\n      template: 'block_name_rm:\\n  - text:\\n    - Text goes here..(1)\\n    - Text goes here..(2)'\n    },{\n      type: 'Typing - Message with typing',\n      template: 'block_name_bm:\\n  - text: Text goes here..(1)\\n    typing: 1000ms'\n    }\n  ];\n}\n\nmodule.exports = bp => {\n  const [umm, registerConnector] = _.at(bp, ['umm', 'umm.registerConnector']);\n\n  umm && registerConnector && registerConnector({\n    platform: 'twitter',\n    processOutgoing: args => processOutgoing(Object.assign({}, args, { bp })),\n    templates: getTemplates()\n  });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/umm.js","module.exports = require(\"util\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"util\"\n// module id = 5\n// module chunks = 0","module.exports = require(\"lodash\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lodash\"\n// module id = 6\n// module chunks = 0","module.exports = require(\"bluebird\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"bluebird\"\n// module id = 7\n// module chunks = 0","const Twitter = require('twit');\nconst Promise = require('bluebird');\n\nimport incoming from './incoming';\n\nclass twitter {\n  constructor(bp, config) {\n    if (!bp || !config) {\n      throw new Error('You need to specify botpress and config');\n    }\n    this.bot = null;\n    this.connected = false;\n    this.stream=null;\n    this.bot = new Twitter(config);\n    bp.logger.info('twitter bot created');\n  }\n\n  setConfig(config) {\n    this.config = Object.assign({}, this.config, config);\n  }\n\n  validateConnection() {\n    if (!this.connected) {\n      throw new Error('You are not connected...');\n    }\n  }\n\n  static validateText(text) {\n    const type = typeof(text);\n    if (type !== 'string') {\n      throw new Error(\n          'Text format is not valid (actual: ' + type + ', required: string)');\n    }\n  }\n\n  static validateChatId(chatId) {\n    const type = typeof(chatId);\n    if (type !== 'number') {\n      throw new Error('Chat id format is not valid (actual: ' + type +\n          ', required: number)');\n    }\n  }\n\n\n  static validateOptions(options) {\n    const type = typeof(options);\n    if (type !== 'object') {\n      throw new Error('Options format is not valid (actual: ' + type +\n          ', required: object)');\n    }\n  }\n\n  static validateBeforeReaction(options) {\n    if (!(options.file || options.file_comment || options.chat ||\n        options.timestamp)) {\n      throw new Error(\n          'You need to set at least a destination options (file, file_comment, chat, timestamp)...');\n    }\n  }\n\n  validateBeforeSending(chatId, options) {\n    this.validateConnection();\n    //twitter.validateChatId(chatId);\n    twitter.validateOptions(options);\n  }\n\n  sendText(chatId, text, options) {\n    this.validateBeforeSending(chatId, options);\n    twitter.validateText(text);\n\n    return Promise.fromCallback(() => {\n      this.bot.post('direct_messages/new', {\n        screen_name: chatId,\n        text: text\n      }, function(error, message, response) {\n      });\n    });\n  }\n\n  startPolling(bp) {\n    incoming(bp, this);\n    bp.logger.info('twitter loaded handler');\n    //this.stream=this.bot.stream('user');\n    bp.logger.info('twitter started polling');\n    this.connected = true;\n  }\n}\n\nmodule.exports = twitter;\n\n\n\n// WEBPACK FOOTER //\n// ./src/twitter.js","import LRU from 'lru-cache';\n\nmodule.exports = (bp, twitter) => {\n  const messagesCache = LRU({\n    max: 10000,\n    maxAge: 60 * 60 * 1000,\n  });\n\n  const preprocessEvent = (payload) => {\n    console.log('preprocessEvent');\n    let mid = `${payload.chat.id}_${payload.from.id}_${payload.date}`;\n\n    if (mid && !messagesCache.has(mid)) {\n      payload.alreadyProcessed = true;\n    } else {\n      messagesCache.set(mid, true);\n    }\n\n    return payload;\n  };\n\n  const extractBasics = (event) => {\n    return {\n      platform: 'twitter',\n      raw: event,\n    };\n  };\n\n  var stream = twitter.bot.stream('user');\n  stream.on('direct_message', function (event) {\n    bp.middlewares.sendIncoming({\n      type: 'text',\n      chat: event.direct_message,\n      user: event.direct_message.recipient,\n      text: event.direct_message.text,\n      message_id: event.direct_message.id,\n      ...extractBasics(event)\n    });\n\n\n  });\n  \n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/incoming.js","module.exports = require(\"lru-cache\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"lru-cache\"\n// module id = 10\n// module chunks = 0","module.exports = require(\"twit\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"twit\"\n// module id = 11\n// module chunks = 0","module.exports = require(\"path\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"path\"\n// module id = 12\n// module chunks = 0","module.exports = require(\"fs\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"fs\"\n// module id = 13\n// module chunks = 0"],"sourceRoot":""}